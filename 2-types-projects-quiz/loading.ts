{
  /**
   * Print Loading State
   */
  type LoadingState = {
    state: 'loading';
  };

  type SuccessState = {
    state: 'success';
    response: {
      body: string;
    };
  };

  type FailState = {
    state: 'fail';
    reason: string;
  };

  type ResourceLoadState = LoadingState | SuccessState | FailState;

  const printLoginState = (resourceLoadState: ResourceLoadState) => {
    switch(resourceLoadState.state) {
      case 'loading': console.log('ğŸ‘€ loading...'); break;
      case 'success': console.log(`ğŸ˜ƒ ${resourceLoadState.response.body}`); break;
      case 'fail':  console.log(`ğŸ˜± ${resourceLoadState.reason}`); break;
    }
  }
  printLoginState({ state: 'loading' }); // ğŸ‘€ loading...
  printLoginState({ state: 'success', response: { body: 'loaded' } }); // ğŸ˜ƒ loaded
  printLoginState({ state: 'fail', reason: 'no network' }); // ğŸ˜± no network
}
